{"version":3,"sources":["components/Context.tsx","components/LocationMarker.tsx","utils/ChooseIcon.ts","components/LocationInfoBox.tsx","components/Map.tsx","utils/checkGeometries.ts","components/Header.tsx","components/App.tsx","index.tsx"],"names":["Context","createContext","LocationMarker","icon","fontSize","color","id","main","onClick","lat","lng","useContext","isVisible","_id","drought","wildfire","flood","stormSevere","dotIcon","volcano","landslide","iceberg","earthquake","ChooseIcon","className","style","LocationInfoBox","title","eventDate","visible","useState","display","setDisplay","ts","Date","useEffect","xIcon","toDateString","googleApiKey","process","console","log","defaultCenter","Map","data","center","zoom","locationInfo","setLocatonInfo","markers","map","ev","includes","categories","geoType","coordinates","checkGeometries","geometries","type","date","arr","i","elem","push","length","bootstrapURLKeys","key","defaultZoom","options","fullscreenControl","Header","App","context","setContext","eventData","setEventData","loading","setLoading","a","fetch","res","json","events","fetchEvents","size","Provider","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAEaA,EAAUC,yBAAmB,G,+EC+B3BC,EArByB,SAAC,GAAqC,IAExEC,EACAC,EAAUC,EAH2BC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,KAAgBC,GAAc,EAAxBC,IAAwB,EAAnBC,IAAmB,EAAdF,SAAc,EACrDG,qBAAWX,GAAxBY,EADkE,sBCFnD,SAACC,EAAaN,GACtC,IAAIH,EAAW,OACXC,EAAQ,OACRF,EAAOW,IAkCX,OAjCY,IAARD,GACFT,EAAW,SACXC,EAAQ,UACRF,EAAOW,KACU,IAARD,GACTT,EAAW,SACXC,EAAQ,MACRF,EAAOY,KACU,IAARF,GACTR,EAAQ,UACRF,EAAOa,KACU,KAARH,EACLN,GACFF,EAAQ,SACRF,EAAOc,MAEPb,EAAW,SACXC,EAAQ,UACRF,EAAOe,KAEQ,KAARL,EACTV,EAAOgB,IACU,KAARN,GACTT,EAAW,SACXD,EAAOiB,KACU,KAARP,GACTT,EAAW,SACXD,EAAOkB,KACU,KAARR,IACTT,EAAW,OACXC,EAAQ,UACRF,EAAOmB,KAEF,CAACnB,EAAMC,EAAUC,GD/BEkB,CAAWjB,EAAIC,GAJkC,mBAI1EJ,EAJ0E,KAIpEC,EAJoE,KAI1DC,EAJ0D,KAU3E,OACE,qBAAKmB,UAAU,gBAAgBhB,QANd,WACjBI,GAAU,GACVJ,KAIA,SACE,cAAC,OAAD,CACEL,KAAMA,EACNqB,UAAU,uBACVC,MAAO,CAAEpB,QAAOD,iB,QEaTsB,EA9B0B,SAAC,GAA8B,IAA5BpB,EAA2B,EAA3BA,GAAIqB,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAAgB,EACxCjB,qBAAWX,GAD6B,mBAC9D6B,EAD8D,KACrDjB,EADqD,OAEvCkB,mBAAS,gBAF8B,mBAE9DC,EAF8D,KAErDC,EAFqD,KAGjEC,EAAK,IAAIC,KAAKN,GASlB,OARAO,qBAAU,WAENH,EADEH,EACS,eAEA,0BAEZ,CAACA,IAGF,sBAAKL,UAAWO,EAAhB,UACE,qBAAKP,UAAU,GAAGhB,QAAS,kBAAMI,GAAU,IAA3C,SACE,cAAC,IAAD,CAAMT,KAAMiC,IAAOZ,UAAU,0BAE/B,qDAEA,qBAAIA,UAAU,qBAAd,UACE,oBAAIA,UAAU,2BAAd,SAA0CG,IAC1C,oBAAIH,UAAU,2BAAd,SAA0CS,EAAGI,iBAC7C,qBAAIb,UAAU,2BAAd,iBACM,iCAASlB,cC5BjBgC,EAAeC,0CACrBC,QAAQC,IAAIH,GACZ,IAAMI,EAAgB,CACpBjC,IAAK,UACLC,IAAK,WA2FQiC,EAjFc,SAAC,GAIvB,IAHLC,EAGI,EAHJA,KAGI,IAFJC,cAEI,MAFKH,EAEL,MADJI,YACI,MAZc,EAYd,IACmChB,mBAAS,CAC9CxB,GAAI,GACJqB,MAAO,GACPC,UAAW,KAJT,mBACGmB,EADH,KACiBC,EADjB,KAMEC,EAAUL,EAAKM,KAAI,SAACC,GACxB,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAAIC,SAASD,EAAGE,WAAW,GAAG/C,IAAK,CAC3D,IAAII,EACAD,EAFuD,EC9BlC,SAAC6C,EAAiBC,GAC/C,IAAI7C,EACAD,EAQJ,MAPgB,UAAZ6C,GACF5C,EAAM6C,EAAY,GAClB9C,EAAM8C,EAAY,KAElB7C,EAAM6C,EAAY,GAAG,GAAG,GACxB9C,EAAM8C,EAAY,GAAG,GAAG,IAEnB,CAAC7C,EAAKD,GDwBI+C,CACXL,EAAGM,WAAW,GAAGC,KACjBP,EAAGM,WAAW,GAAGF,aANwC,mBAQ3D,OAJC7C,EAJ0D,KAIrDD,EAJqD,KASzD,cAAC,EAAD,CACEH,GAAI6C,EAAGE,WAAW,GAAG/C,GACrBG,IAAKA,EACLC,IAAKA,EACLF,QAAS,kBACPwC,EAAe,CACb1C,GAAI6C,EAAG7C,GACPqB,MAAOwB,EAAGxB,MACVC,UAAWuB,EAAGM,WAAW,GAAGE,UAK/B,GAA4B,KAAxBR,EAAGE,WAAW,GAAG/C,GAAW,CACrC,IADqC,EACjCsD,EAAM,GACNC,EAAI,EAF6B,cAGlBV,EAAGM,YAHe,IAGrC,2BAAkC,CAAC,IAAxBK,EAAuB,QAChCF,EAAIG,KACF,cAAC,EAAD,CACEzD,GAAI6C,EAAGE,WAAW,GAAG/C,GACrBC,KAAY,IAANsD,GAAWA,IAAMV,EAAGM,WAAWO,OAAS,EAC9CvD,IAAKqD,EAAKP,YAAY,GACtB7C,IAAKoD,EAAKP,YAAY,GACtB/C,QAAS,kBACPwC,EAAe,CACb1C,GAAI6C,EAAG7C,GACPqB,MAAOwB,EAAGxB,MACVC,UAAWuB,EAAGM,WAAW,GAAGE,WAKpCE,GAAK,GAnB8B,8BAsBrC,OAAOD,EAEP,OAAO,QAGX,OACE,sBAAKpC,UAAU,MAAf,UACE,cAAC,IAAD,CACEyC,iBAAkB,CAAEC,IAAK5B,GACzBI,cAAeG,EACfsB,YAAarB,EACbsB,QAAS,CAAEC,mBAAmB,GAJhC,SAMGpB,IAEqB,KAAvBF,EAAapB,OACZ,cAAC,EAAD,CACErB,GAAIyC,EAAazC,GACjBqB,MAAOoB,EAAapB,MACpBC,UAAWmB,EAAanB,gBEnFnB0C,EAVA,WACb,OACE,wBAAQ9C,UAAU,SAAlB,SACE,oBAAIA,UAAU,eAAd,wC,iBCoCS+C,EAhCO,WAAO,IAAD,EACIzC,oBAAS,GADb,mBACnB0C,EADmB,KACVC,EADU,OAEQ3C,mBAAS,IAFjB,mBAEnB4C,EAFmB,KAERC,EAFQ,OAGI7C,oBAAS,GAHb,mBAGnB8C,EAHmB,KAGVC,EAHU,KAgB1B,OAZA1C,qBAAU,YACS,uCAAG,gCAAA2C,EAAA,6DAClBD,GAAW,GADO,SAEAE,MAAM,oEAAD,OATVxC,6CAOK,cAEZyC,EAFY,gBAKOA,EAAIC,OALX,gBAKVC,EALU,EAKVA,OACRP,EAAaO,GACbL,GAAW,GAPO,4CAAH,qDASjBM,KACC,IAED,qCACE,cAAC,EAAD,IACCP,EACC,qBAAKpD,UAAU,SAAf,SACE,cAAC,IAAD,CAAiBnB,MAAO,UAAW+E,KAAM,OAG3C,cAACpF,EAAQqF,SAAT,CAAkBC,MAAO,CAACd,EAASC,GAAnC,SACE,cAAC,EAAD,CAAK7B,KAAM8B,U,MC3BrBa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1bd94ae1.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport const Context = createContext<any>(false);","import { Icon } from \"@iconify/react\";\nimport { Context } from \"./Context\";\nimport { useContext } from \"react\";\nimport { ChooseIcon } from \"../utils/ChooseIcon\";\ninterface Props {\n  id: number;\n  main?: boolean;\n  lat: number;\n  lng: number;\n  onClick?: any;\n}\n\nconst LocationMarker: React.FC<Props> = ({ id, main, lat, lng, onClick }) => {\n  const [, isVisible] = useContext(Context);\n  let icon: any;\n  let fontSize, color;\n  [icon, fontSize, color] = ChooseIcon(id, main)!;\n  const onClickFun = () => {\n    isVisible(true);\n    onClick();\n  };\n\n  return (\n    <div className=\"locatioMarker\" onClick={onClickFun}>\n      <Icon\n        icon={icon}\n        className=\"locationMarker__icon\"\n        style={{ color, fontSize }}\n      />\n    </div>\n  );\n};\n\nexport default LocationMarker;\n","import stormSevere from \"@iconify-icons/carbon/thunderstorm-severe\";\nimport iceberg from \"@iconify-icons/openmoji/iceberg\";\nimport volcano from \"@iconify-icons/emojione/volcano\";\nimport drought from \"@iconify-icons/carbon/drought\";\nimport dotIcon from \"@iconify-icons/bi/dot\";\nimport flood from \"@iconify-icons/carbon/flood\";\nimport landslide from \"@iconify-icons/openmoji/landslide\";\nimport earthquake from \"@iconify-icons/ri/earthquake-line\";\nimport wildfire from \"@iconify-icons/el/fire\";\n\nexport const ChooseIcon = (_id: number, main: boolean | undefined) => {\n  let fontSize = \"2rem\";\n  let color = \"blue\";\n  let icon = drought;\n  if (_id === 6) {\n    fontSize = \"1.8rem\";\n    color = \"#d5d1cc\";\n    icon = drought;\n  } else if (_id === 8) {\n    fontSize = \"1.5rem\";\n    color = \"red\";\n    icon = wildfire;\n  } else if (_id === 9) {\n    color = \"#83d7ee\";\n    icon = flood;\n  } else if (_id === 10) {\n    if (main) {\n      color = \"yellow\";\n      icon = stormSevere;\n    } else {\n      fontSize = \"1.5rem\";\n      color = \"#fc6b03\";\n      icon = dotIcon;\n    }\n  } else if (_id === 12) {\n    icon = volcano;\n  } else if (_id === 14) {\n    fontSize = \"2.5rem\";\n    icon = landslide;\n  } else if (_id === 15) {\n    fontSize = \"1.6rem\";\n    icon = iceberg;\n  } else if (_id === 16) {\n    fontSize = \"2rem\";\n    color = \"#A9A18C\";\n    icon = earthquake;\n  }\n  return [icon, fontSize, color];\n};\n","import Icon from \"@iconify/react\";\nimport xIcon from \"@iconify-icons/bi/x\";\nimport { Context } from \"./Context\";\nimport { useContext, useState, useEffect } from \"react\";\n\ninterface Props {\n  id: string;\n  title: string;\n  eventDate: string;\n}\nconst LocationInfoBox: React.FC<Props> = ({ id, title, eventDate }) => {\n  const [visible, isVisible] = useContext(Context);\n  const [display, setDisplay] = useState(\"locationInfo\");\n  let ts = new Date(eventDate);\n  useEffect(() => {\n    if (visible) {\n      setDisplay(\"locationInfo\");\n    } else {\n      setDisplay(\"locationInfo--hidden\");\n    }\n  }, [visible]);\n\n  return (\n    <div className={display}>\n      <div className=\"\" onClick={() => isVisible(false)}>\n        <Icon icon={xIcon} className=\"locationInfo__xIcon\" />\n      </div>\n      <h2>Event Location Info</h2>\n\n      <ul className=\"locationInfo__list\">\n        <li className=\"locationInfo__list__item\">{title}</li>\n        <li className=\"locationInfo__list__item\">{ts.toDateString()}</li>\n        <li className=\"locationInfo__list__item\">\n          ID: <strong>{id}</strong>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default LocationInfoBox;\n","import { useState } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport LocationMarker from \"./LocationMarker\";\nimport LocationInfoBox from \"./LocationInfoBox\";\nimport { checkGeometries } from \"../utils/checkGeometries\";\nconst googleApiKey = process.env.REACT_APP_GOOGLE_API_KEY!;\nconsole.log(googleApiKey);\nconst defaultCenter = {\n  lat: 45.237049,\n  lng: 21.017532,\n};\nconst defaultZoom = 5;\n\ninterface Props {\n  data: any[];\n  center?: { lat: number; lng: number };\n  zoom?: number;\n}\n\nconst Map: React.FC<Props> = ({\n  data,\n  center = defaultCenter,\n  zoom = defaultZoom,\n}) => {\n  const [locationInfo, setLocatonInfo] = useState({\n    id: \"\",\n    title: \"\",\n    eventDate: \"\",\n  });\n  const markers = data.map((ev) => {\n    if ([6, 8, 9, 12, 14, 15, 16].includes(ev.categories[0].id)) {\n      let lng: number;\n      let lat: number;\n\n      [lng, lat] = checkGeometries(\n        ev.geometries[0].type,\n        ev.geometries[0].coordinates\n      );\n      return (\n        <LocationMarker\n          id={ev.categories[0].id}\n          lat={lat}\n          lng={lng}\n          onClick={() =>\n            setLocatonInfo({\n              id: ev.id,\n              title: ev.title,\n              eventDate: ev.geometries[0].date,\n            })\n          }\n        />\n      );\n    } else if (ev.categories[0].id === 10) {\n      let arr = [];\n      let i = 0;\n      for (const elem of ev.geometries) {\n        arr.push(\n          <LocationMarker\n            id={ev.categories[0].id}\n            main={i === 0 || i === ev.geometries.length - 1}\n            lat={elem.coordinates[1]}\n            lng={elem.coordinates[0]}\n            onClick={() =>\n              setLocatonInfo({\n                id: ev.id,\n                title: ev.title,\n                eventDate: ev.geometries[0].date,\n              })\n            }\n          />\n        );\n        i += 1;\n      }\n\n      return arr;\n    } else {\n      return null;\n    }\n  });\n  return (\n    <div className=\"map\">\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: googleApiKey }}\n        defaultCenter={center}\n        defaultZoom={zoom}\n        options={{ fullscreenControl: false }}\n      >\n        {markers}\n      </GoogleMapReact>\n      {locationInfo.title !== \"\" && (\n        <LocationInfoBox\n          id={locationInfo.id}\n          title={locationInfo.title}\n          eventDate={locationInfo.eventDate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Map;\n","export const checkGeometries = (geoType: string, coordinates: any[]) => {\n  let lng: number;\n  let lat: number;\n  if (geoType === \"Point\") {\n    lng = coordinates[0];\n    lat = coordinates[1];\n  } else {\n    lng = coordinates[0][0][0];\n    lat = coordinates[0][0][1];\n  }\n  return [lng, lat];\n};\n","const Header = () => {\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__text\">\n        Natural Hazards Tracker\n      </h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport Map from \"./Map\";\nimport Header from \"./Header\";\nimport PropagateLoader from \"react-spinners/PropagateLoader\";\nimport { Context } from \"./Context\";\nconst nasaApiKey = process.env.REACT_APP_NASA_API_KEY;\n\nconst App: React.FC = () => {\n  const [context, setContext] = useState(false);\n  const [eventData, setEventData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true);\n      const res = await fetch(\n        `https://eonet.sci.gsfc.nasa.gov/api/v2.1/events?days=300&api_key=${nasaApiKey}`\n      );\n      const { events } = await res.json();\n      setEventData(events);\n      setLoading(false);\n    };\n    fetchEvents();\n  }, []);\n  return (\n    <>\n      <Header />\n      {loading ? (\n        <div className=\"loader\">\n          <PropagateLoader color={\"#123abc\"} size={30} />\n        </div>\n      ) : (\n        <Context.Provider value={[context, setContext]}>\n          <Map data={eventData} />\n        </Context.Provider>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}